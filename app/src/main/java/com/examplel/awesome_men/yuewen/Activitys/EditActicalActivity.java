package com.examplel.awesome_men.yuewen.Activitys;import android.app.Activity;import android.app.Dialog;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.annotation.Nullable;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.support.v7.content.res.AppCompatResources;import android.support.v7.widget.DialogTitle;import android.support.v7.widget.Toolbar;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.examplel.awesome_men.yuewen.CusViews.EditableDialog;import com.examplel.awesome_men.yuewen.DataClass.Artical;import com.examplel.awesome_men.yuewen.R;import com.examplel.awesome_men.yuewen.Utils.AppUtils;import com.examplel.awesome_men.yuewen.Utils.HttpUtils;import com.examplel.awesome_men.yuewen.YueWenApplication;import org.json.JSONException;import org.json.JSONObject;import java.util.HashMap;/** * Created by longer on 2017/5/11. */public class EditActicalActivity extends AppCompatActivity{    private Handler handler;    private TextView titleView;    private TextView descView;    private EditText contentView;    private boolean titleChanged = false;    private boolean descChanged = false;    private Artical artical = null;    public static int TO_LOGIN = 1;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_edit_actical);        Bundle bundle = getIntent().getExtras();        if(bundle != null){         artical = bundle.getParcelable("artical");        }        //artical = (Artical) (bundle==null?null:bundle.getParcelable("articcal"));?????        Toolbar toolbar = (Toolbar) findViewById(R.id.act_editart_toolbar);        toolbar.setTitle("编辑文章");        toolbar.setTitleTextColor(0xffffffff);        toolbar.setOverflowIcon(AppCompatResources.getDrawable(this,R.drawable.ic_arrow_down));        toolbar.setNavigationIcon(R.drawable.ic_back);        setSupportActionBar(toolbar);        toolbar.setNavigationOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                setResult(0x23);                EditActicalActivity.this.finish();            }        });        toolbar.setOnMenuItemClickListener(new Toolbar.OnMenuItemClickListener() {            @Override            public boolean onMenuItemClick(MenuItem item) {                switch (item.getItemId()) {                    case R.id.artedit_menu_item_draft:                        HashMap<String,Object> map1 = new HashMap<>();                        String content1 = contentView.getText().toString();                        if(!titleChanged){                            AppUtils.toast(EditActicalActivity.this,"未输入文章标题");                            break;                        }                        if(content1.isEmpty()){                            AppUtils.toast(EditActicalActivity.this,"未输入文章内容");                            break;                        }                        map1.put("method","savedraft");                        if(descChanged){                            String desc = descView.getText().toString();                            map1.put("desc",desc);                        }                        if(artical!=null){                            map1.put("aid",artical.getId());                        }                        map1.put("title",titleView.getText().toString());                        map1.put("content",contentView.getText().toString());                        map1.put("uid",YueWenApplication.getCurrentUserId());                        if(artical != null){                            map1.put("did",artical.getId());                        }                        HttpUtils.getInstance().httpPost(YueWenApplication.ARTICAL_SERVER_PATH,map1,handler);                        break;                    case R.id.artedit_menu_item_release:                        if(!titleChanged){                            AppUtils.toast(EditActicalActivity.this,"未输入文章标题");                            break;                        }                        String content = contentView.getText().toString();                        if(content.isEmpty()){                            AppUtils.toast(EditActicalActivity.this,"未输入文章内容");                            break;                        }                        String title = titleView.getText().toString();                        HashMap<String,Object> map = new HashMap<>();                        map.put("method","newartical");                        map.put("title",title);                        if(descChanged){                            String desc = descView.getText().toString();                            map.put("desc",desc);                        }                        map.put("content",content);                        map.put("userid",YueWenApplication.getCurrentUserId());                        if(artical != null){                            map.put("aid",artical.getId());                        }                        HttpUtils.getInstance().httpPost(YueWenApplication.ARTICAL_SERVER_PATH,map,handler);                        break;                }                return true;            }        });        initView();        handler = new Handler(){            @Override            public void handleMessage(Message msg){                switch (msg.what){                    case HttpUtils.HTTP_FAILED:                        AppUtils.toast(EditActicalActivity.this,"无法连接到服务器");                        break;                    case HttpUtils.HTTP_SUCCESS:                        String dataS = (String)msg.obj;                        try{                            JSONObject dataJ = new JSONObject(dataS);                            int error = dataJ.getInt("error");                            String resultMsg = dataJ.getString("msg");                            switch (error){                                case 0:                                    AppUtils.toast(EditActicalActivity.this,resultMsg);                                    setResult(Activity.RESULT_OK);                                    EditActicalActivity.this.finish();                                    break;                                default:                                    AppUtils.toast(EditActicalActivity.this,resultMsg);                                    break;                            }                        }catch (JSONException je){                           AppUtils.toast(EditActicalActivity.this,"解析json数据失败");                        }                        break;                }            }        };    }    @Override    public boolean onCreateOptionsMenu(Menu menu){        super.onCreateOptionsMenu(menu);        getMenuInflater().inflate(R.menu.edit_art_menu, menu);        return true;    }    private void initView(){        titleView = (TextView)findViewById(R.id.activity_artical_title);        if(artical!=null&&artical.getTitle()!=null){            titleView.setText(artical.getTitle());            titleChanged = true;        }        titleView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                final EditText editText = new EditText(EditActicalActivity.this);                if(titleChanged){                    editText.setText(titleView.getText());                }                AlertDialog.Builder alert = new AlertDialog.Builder(EditActicalActivity.this);                alert.setMessage("输入标题");                alert.setView(editText);                alert.setNegativeButton("放弃输入",null);                alert.setPositiveButton("完成输入", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        if(editText.getText().toString().isEmpty()){                            return;                        }                        titleView.setText(editText.getText());                        titleChanged = true;                    }                });                alert.show();            }        });        descView = (TextView)findViewById(R.id.activity_artical_desc);        if(artical!=null&&artical.getDesc()!=null){           descView.setText(artical.getDesc());            descChanged = true;        }        descView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                final EditText editText = new EditText(EditActicalActivity.this);                if(descChanged){                    editText.setText(descView.getText());                }                AlertDialog.Builder alert = new AlertDialog.Builder(EditActicalActivity.this);                alert.setMessage("输入对文章的描述");                alert.setView(editText);                alert.setNegativeButton("放弃输入",null);                alert.setPositiveButton("完成输入", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialogInterface, int i) {                        if(editText.getText().toString().isEmpty()){                            return;                        }                        descView.setText(editText.getText());                        descChanged = true;                    }                });                alert.show();            }        });        contentView = (EditText) findViewById(R.id.activity_artical_content);        if(artical!=null&&artical.getContent()!=null){            contentView.setText(artical.getContent());        }    }}